# -*- coding: utf-8 -*-
"""skin-cancer-type-detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lDMW5up6XSWdfnRFiKPAPDt3I8Ia-Dud

# Skin cancer detection
## Data exploration

First we need to understand the kind of data we have as training data. Common data exploration tasks can be:
* Number of files
* Number of classes
* Class distribution
* Duplicates
* Wrong/missing labels
"""

# Commented out IPython magic to ensure Python compatibility.
# %reload_ext autoreload
# %autoreload 2
# %matplotlib inline

from fastai import *
from fastai.vision import *
from fastai.callbacks.hooks import *

import numpy as np 
import pandas as pd 
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import auc,roc_curve
import os
from glob import glob
from skimage.io import imread
import shutil

!mkdir data

!cd data
!mkdir raw

!cd raw

!mkdir .kaggle/

! cd .kaggle/

import json
token = {"username":"chrissponagle","key":"1f7074895924544ed1c11d8b62e3c38c"}
with open('.kaggle/kaggle.json', 'w') as file:
    json.dump(token, file)

! cd .kaggle

!cp .kaggle/kaggle.json ~/.kaggle/kaggle.json
!kaggle config set -n path -v{/content}
!chmod 600 /root/.kaggle/kaggle.json
!kaggle datasets list
!mkdir .kaggle
!mv kaggle.json .kaggle
!chmod 600 ~/.kaggle/kaggle.json
!cp /content/.kaggle/kaggle.json ~/.kaggle/kaggle.json
!chmod 600 ~/.kaggle/kaggle.json
!kaggle config set -n path -v{/content}

!cd raw

!kaggle datasets download kmader/skin-cancer-mnist-ham10000 -p raw

!unzip -o raw/skin-cancer-mnist-ham10000.zip -d raw
!echo files in /raw: `ls raw | wc -l`

"""#### LABELS

Excerpts from the paper:

> The HAM10000 Dataset: A Large Collection of Multi-Source Dermatoscopic Images of Common Pigmented Skin Lesions
https://arxiv.org/abs/1803.10417

**nv**  
Melanocytic nevi are benign neoplasms of melanocytes and appear in a myriad of variants, which all are included in our series. The variants may differ significantly from a dermatoscopic point of view.  
*[6705 images]*

**mel**  
Melanoma is a malignant neoplasm derived from melanocytes that may appear in different variants. If excised in an early stage it can be cured by simple surgical excision. Melanomas can be invasive or non-invasive (in situ). We included all variants of melanoma including melanoma in situ, but did exclude non-pigmented, subungual, ocular or mucosal melanoma.  
*[1113 images]*

**bkl**  
"Benign keratosis" is a generic class that includes seborrheic ker- atoses ("senile wart"), solar lentigo - which can be regarded a flat variant of seborrheic keratosis - and lichen-planus like keratoses (LPLK), which corresponds to a seborrheic keratosis or a solar lentigo with inflammation and regression [22]. The three subgroups may look different dermatoscop- ically, but we grouped them together because they are similar biologically and often reported under the same generic term histopathologically. From a dermatoscopic view, lichen planus-like keratoses are especially challeng- ing because they can show morphologic features mimicking melanoma [23] and are often biopsied or excised for diagnostic reasons.  
*[1099 images]*

**bcc**  
Basal cell carcinoma is a common variant of epithelial skin cancer that rarely metastasizes but grows destructively if untreated. It appears in different morphologic variants (flat, nodular, pigmented, cystic, etc) [21], which are all included in this set.  
*[514 images]*

**akiec**  
Actinic Keratoses (Solar Keratoses) and intraepithelial Carcinoma (Bowen’s disease) are common non-invasive, variants of squamous cell car- cinoma that can be treated locally without surgery. Some authors regard them as precursors of squamous cell carcinomas and not as actual carci- nomas. There is, however, agreement that these lesions may progress to invasive squamous cell carcinoma - which is usually not pigmented. Both neoplasms commonly show surface scaling and commonly are devoid of pigment. Actinic keratoses are more common on the face and Bowen’s disease is more common on other body sites. Because both types are in- duced by UV-light the surrounding skin is usually typified by severe sun damaged except in cases of Bowen’s disease that are caused by human papilloma virus infection and not by UV. Pigmented variants exists for Bowen’s disease [19] and for actinic keratoses [20]. Both are included in this set.  
*[327 images]*

**vasc**  
Vascular skin lesions in the dataset range from cherry angiomas to angiokeratomas [25] and pyogenic granulomas [26]. Hemorrhage is also included in this category.  
*[142 images]*

**df**  
Dermatofibroma is a benign skin lesion regarded as either a benign proliferation or an inflammatory reaction to minimal trauma. It is brown often showing a central zone of fibrosis dermatoscopically [24].  
*[115 images]*


*[Total images = 10015]*

### First glance at the availble raw data
#### Specify some paths
"""

!mkdir interim

!mkdir processed
!mkdir reports
!mkdir models

raw_dir = 'raw'
interim_dir = 'interim'
processed_dir = 'processed'
reports_dir = 'reports'
model_dir = 'models'

"""#### Check what files we have"""

os.listdir(raw_dir)

"""* the metadata with all necessary informations are saved in HAM10000_metadata.csv
* the folders HAM10000_images_part_1 and HAM10000_images_part_2 contain the image data

#### Check how the metadata for the images looks
"""

meta_df = pd.read_csv(os.path.join(raw_dir, 'HAM10000_metadata.csv')).set_index('image_id')
meta_df.head(3)

meta_df.describe(exclude=[np.number])

"""It looks like we have duplicates in the lesion_id field. This means we have two pictures for the same lesion. We should remove those duplicates to keep the data more balanced.

Additionally, we can see that we have 7 classes. After looking at the HAM10000 description we find out that the classes are:
"""

lesion_type_dict = {
    'nv': 'Melanocytic nevi',
    'mel': 'Melanoma',
    'bkl': 'Benign keratosis-like lesions ',
    'bcc': 'Basal cell carcinoma',
    'akiec': 'Actinic keratoses',
    'vasc': 'Vascular lesions',
    'df': 'Dermatofibroma'
}

"""#### Lets extend the dataframe with the additional information on the lesion"""

meta_df['lesion'] = meta_df['dx'].map(lesion_type_dict.get) 
meta_df['lesion_idx'] = pd.Categorical(meta_df['lesion']).codes
meta_df.head(3)

"""#### Class distribution over all images"""

fig, ax1 = plt.subplots(1, 1, figsize = (10, 5))
meta_df['lesion'].value_counts().plot(kind='barh', ax=ax1)
fig.savefig(os.path.join(reports_dir, 'class_distribution.png'), dpi=600)

"""Impressions we get from looking at the plot:
* Huge class imbalance in the data   
  This is potentially harmful for the recognition because it will make it more likely for the model to detect the "Melanocytic nevi" class over others.

#### Check how many image files we have and what the shapes are
"""

imageid_path_dict = {os.path.splitext(os.path.basename(x))[0]: x 
                     for x in glob(os.path.join(raw_dir, '*', '*.jpg'))}

meta_df['path'] = meta_df.index.map(imageid_path_dict.get)
meta_df['lesion_idx'] = pd.Categorical(meta_df['lesion']).codes
meta_df['image'] = meta_df['path'].map(imread)
meta_df['image'].map(lambda x: x.shape).value_counts()

"""We can see that all images have the same shape, which allows us to continue with this data without having to reshape the images first.

#### Look at some example picture of each class
"""

n_samples = 5
fig, m_axs = plt.subplots(7, n_samples, figsize = (4*n_samples, 3*7))
for n_axs, (type_name, type_rows) in zip(m_axs, 
                                         meta_df.sort_values(['lesion']).groupby('lesion')):
    n_axs[0].set_title(type_name)
    for c_ax, (_, c_row) in zip(n_axs, type_rows.sample(n_samples, random_state=2018).iterrows()):
        c_ax.imshow(c_row['image'])
        c_ax.axis('off')
fig.savefig(os.path.join(reports_dir, 'category_samples.png'), dpi=600)

interim_dir = 'interim'
processed_dir = 'processed'
reports_dir = 'reports'
model_dir = 'models'



"""#### Save dataframe"""

meta_df = meta_df.drop('image', axis=1)

meta_df.to_pickle(os.path.join(interim_dir, 'meta_df.pkl'))
os.listdir('./')

"""## Data manipulation & Training data generation

#### Remove duplicates
"""

meta_df.reset_index(inplace=True)
meta_df.describe(exclude=[np.number])

# create a stratified set
df = meta_df.groupby('lesion_id').count()
# get all images that have only one lesion id
df = df[df['image_id'] == 1]
df.reset_index(inplace=True)

filtered_df = meta_df[meta_df['lesion_id'].isin(df['lesion_id'])]
filtered_df.describe(exclude=[np.number])

"""#### Save filtered df"""

filtered_df.to_pickle(os.path.join(interim_dir, 'filtered_df.pkl'))
os.listdir(interim_dir)

"""#### Load filtered df"""

filtered_df = pd.read_pickle(os.path.join(interim_dir, 'filtered_df.pkl'))
filtered_df = filtered_df.set_index('image_id')
# filtered_df.head()

"""#### Get training data"""

for index, row in filtered_df.iterrows():
    dest = os.path.join(processed_dir, row['dx'])
    if not os.path.exists(dest):
        os.mkdir(dest)
    shutil.copy2(row['path'], dest)

def get_data(bs, size):
    return (ImageList.from_folder(processed_dir) 
        .split_by_rand_pct(0.15) 
        .label_from_folder() 
        .transform(tfms=get_transforms(flip_vert=True), size=size) 
        .databunch(num_workers=4, bs=bs)
        .normalize(imagenet_stats))

!echo files in processed: `ls processed`



data = get_data(10, 224)
print(data.classes)

"""## Model training"""

learner = create_cnn(data,models.resnet50,metrics=[accuracy], model_dir=model_dir)

learner.loss_func=nn.CrossEntropyLoss()

learner.lr_find()
learner.recorder.plot()

learner.fit_one_cycle(8, 3e-3)

learner.unfreeze()

learner.lr_find()
learner.recorder.plot()

lr=1e-6
learner.fit_one_cycle(3, slice(3*lr,10*lr))

learner.save('stage-1')

interp = ClassificationInterpretation.from_learner(learner)

interp.plot_confusion_matrix(figsize=(10,8))

interp.most_confused()

"""#### Interference"""

pred_data=get_data(16,224)

pred_data.classes=list(np.unique(filtered_df.lesion))  
pred_data.c= len(np.unique(filtered_df.lesion)) 
pred_data.single_from_classes(path, pred_data.classes)

predictor = create_cnn(pred_data, models.resnet50, model_dir=model_dir).load('stage-1')

img = open_image(os.path.join(processed_dir, 'vasc', 'ISIC_0031215.jpg'))
img

pred_class,pred_idx,outputs = predictor.predict(img)
pred_class

"""#### Heatmap"""

x,y = data.valid_ds[2]
x.show()
data.valid_ds.y[2]

def heatMap(x,y,data, learner, size=(0,224,224,0)):
    """HeatMap"""
    
    # Evaluation mode
    m=learner.model.eval()
    
    # Denormalize the image
    xb,_ = data.one_item(x)
    xb_im = Image(data.denorm(xb)[0])
    xb = xb.cuda()
    
    # hook the activations
    with hook_output(m[0]) as hook_a: 
        with hook_output(m[0], grad=True) as hook_g:
            preds = m(xb)
            preds[0,int(y)].backward()

    # Activations    
    acts=hook_a.stored[0].cpu()
    
    # Avg of the activations
    avg_acts=acts.mean(0)
    
    # Show HeatMap
    _,ax = plt.subplots()
    xb_im.show(ax)
    ax.imshow(avg_acts, alpha=0.6, extent=size,
              interpolation='bilinear', cmap='magma')

heatMap(x,y,pred_data,learner)

